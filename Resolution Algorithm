{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16NHvM-_UTdgNEwkv82IZu1EfH4hzgq-f","timestamp":1684319093588},{"file_id":"1MdVDBbdxtjnxrS82FNd8qOkCl0QZt_0M","timestamp":1677932662521}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["##### AI and Robotics - Assignment 2\n","Team members:\n","\n","*   Akash S.S - SC20B005\n","*   Gershom Stanlin SA - SC20B024\n","*   Naveen G - SC20B036\n","*   Sai Abhishek M - SC20B050\n","*   Vikram Ganesh - SC20B062\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"nVNx8QvnKqyo"}},{"cell_type":"markdown","source":["# Class Definitions And Testing"],"metadata":{"id":"11nMsKlp3Ohi"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"kUwtKThZDdmP"},"outputs":[],"source":["class Proposition:\n","    def __init__(self, op, *operands):\n","        self.op = op\n","        self.operands = operands\n","    \n","    def __eq__(self, other):\n","        if isinstance(other, Proposition):\n","            return self.op == other.op and self.operands == other.operands\n","        return False\n","    \n","    def __str__(self): #helps print Proposition objects with two operands\n","        if self.is_variable():\n","            # print(self.op, \"var\")\n","            return self.op\n","        elif self.is_unary():\n","            # print(self.op)\n","            # print(self.operands[0], \"unary\")\n","            return f\"({self.op}{self.operands[0]})\"\n","        else:\n","            # print(self.op, \"prop\")\n","            # for op in self.operands:\n","            #   print(op)\n","            # print(len(self.operands))\n","            operands_str = \"\"\n","            # for operand in self.operands:\n","            #   operands_str += str(operand)\n","            #   operands_str += (str(self.op))\n","              # operands_str += \" \"\n","            operands_str += (str(self.operands[0]))\n","            operands_str += \" \"\n","            operands_str += (str(self.op))\n","            operands_str += \" \"\n","            operands_str += (str(self.operands[1]))\n","            # # operands_str = \" \".join(str(operand) for operand in self.operands)\n","            return f\"({operands_str})\"\n","    \n","    def is_variable(self):\n","      return isinstance(self.op, str) and not self.operands\n","    \n","    def is_unary(self):\n","        return self.op in {\"~\"} and len(self.operands) == 1\n","    \n","    def is_binary(self):\n","        return self.op in {\"&\", \"|\", \"->\"} and len(self.operands) == 2\n","    \n","    def is_negation(self):\n","        return self.op == \"~\" and self.operands[0].is_variable()\n","    \n","    def is_conjunction(self):\n","        return self.op == \"&\" and all(op.is_proposition() for op in self.operands)\n","    \n","    def is_disjunction(self):\n","        return self.op == \"|\" and all(op.is_proposition() for op in self.operands)\n","    \n","    def is_implication(self):\n","        return self.op == \"->\" and all(op.is_proposition() for op in self.operands)\n","    \n","    def is_proposition(self):\n","        return self.is_variable() or self.is_unary() or self.is_binary()\n","\n","    def print_proposition(self):\n","        print(str(self))\n"]},{"cell_type":"code","source":["class Clause:\n","  def __init__(self, literals):\n","      self.literals = set(literals) #input can be anything like list/set\n","\n","  def __repr__(self): #printing \n","      return f\"({' | '.join(str(literal) for literal in self.literals)})\"\n","\n","  def __eq__(self, other): #useful in sets to avoid duplicates of instances\n","    return isinstance(other, self.__class__) and self.literals == other.literals\n","\n","  def __hash__(self): #sets ordering helper function\n","      return hash(tuple(sorted(self.literals)))\n","\n","  def __len__(self):\n","      return len(self.literals)\n","\n","  def __contains__(self, literal):\n","      return literal in self.literals\n","\n","  def __iter__(self):\n","      return iter(self.literals)\n","\n","  def add_literal(self, literal):\n","      self.literals.add(literal)\n","\n","  def remove_literal(self, literal):\n","      self.literals.remove(literal)\n","\n","  def remove_literal_and_return_new(self, literal):\n","      lit = self.literals\n","      new_lit = lit - set(literal)\n","      # print(new_lit)\n","      return Clause(new_lit)\n","\n","  def is_empty(self):\n","      return len(self.literals) == 0\n","\n","  def is_unit_clause(self):\n","      return len(self.literals) == 1\n","\n","  def contains_literal(self, literal):\n","      return literal in self.literals\n","\n","  def print_clause(self):\n","    print(self)"],"metadata":{"id":"cnxC9Fh5y0FJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["c = Clause([\"p\", \"q\"])\n","c_new = c.remove_literal_and_return_new(\"p\")\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qO3grilfQrmm","executionInfo":{"status":"ok","timestamp":1678119105695,"user_tz":-330,"elapsed":723,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"d0209176-44b3-4bbe-b767-44660b8334fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(p | q)\n"]}]},{"cell_type":"code","source":["c = Clause([\"p\", \"q\"])\n","s = {\"p\", \"r\"}\n","c_set = Clause(s)\n","print(c_set)\n","c.contains_literal(\"~p\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_LGqzpOd4j94","executionInfo":{"status":"ok","timestamp":1678119108575,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"f28469a8-3730-42aa-d3aa-f55490f7e93f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(p | r)\n"]},{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["cnf = Proposition(\"&\", Proposition(\"|\", Proposition(\"p\"), Proposition(\"q\")),\n","                  Proposition(\"|\", Proposition(\"~p\"), Proposition(\"q\")), \n","                  Proposition(\"|\", Proposition(\"p\"), Proposition(\"r\")) \n","                  )\n","cnf.print_proposition()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CcfunjD6zHIO","executionInfo":{"status":"ok","timestamp":1678119111965,"user_tz":-330,"elapsed":429,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"db65ea89-7911-40f2-cc5f-d02397bc5219"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["((p | q) & (~p | q))\n"]}]},{"cell_type":"markdown","source":["# Helper functions for the Resolution Algorithm\n","\n","\n","*   `get_clauses_from_cnf(cnf)`\n","\n","*   `negate(literal)`\n","\n","*   `is_resolvable(c1, c2)`\n","\n","*   `resolve(c1, c2)`\n","\n","\n","\n","\n"],"metadata":{"id":"PiXDhvmC59Dv"}},{"cell_type":"code","source":["def get_clauses_from_cnf(cnf):\n","  '''\n","    given a conjunctive normal form Proposition object, this function returns the clauses as a list of Clause objects\n","  '''\n","  clauses = []\n","  for disj in cnf.operands:\n","    # print(\"conj is \", disj)\n","    c = Clause([])\n","    for literal in disj.operands:\n","      # print(literal)\n","      c.add_literal(str(literal))\n","    clauses.append(c)\n","\n","  return clauses"],"metadata":{"id":"KkBhzGivDfSM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cla = get_clauses_from_cnf(cnf)\n","for c in cla:\n","  print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LndX67YI1lWy","executionInfo":{"status":"ok","timestamp":1678119146451,"user_tz":-330,"elapsed":429,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"62b4f340-08d5-4fe5-c419-f746cd382966"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(p | q)\n","(~p | q)\n","(p | r)\n"]}]},{"cell_type":"code","source":["#checking range function\n","for i in range(len(c)):\n","  print(\"i\", i)\n","  for j in range(i, len(c)):\n","    print(j)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QdK8N0AT7vpi","executionInfo":{"status":"ok","timestamp":1678119152386,"user_tz":-330,"elapsed":389,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"50e8aa1f-b116-4cc7-a7c0-d4b64400131e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["i 0\n","0\n","1\n","i 1\n","1\n"]}]},{"cell_type":"code","source":["def negate(literal):\n","  '''\n","  negates a given literal (i.e p, ~p)\n","  '''\n","  \n","  if literal[0] == \"~\":\n","    return literal[1]\n","  else:\n","    return \"~\" + literal"],"metadata":{"id":"hASk_KF-94eC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["negate(\"~p\") == \"p\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jPMAIS7c-bqk","executionInfo":{"status":"ok","timestamp":1678119165501,"user_tz":-330,"elapsed":727,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"1bcb6cc1-880b-44ab-bd26-c8b0a8825e18"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["def is_resolvable(c1, c2):\n","  '''\n","  check if two Clause objects are resolvable\n","  '''\n","  for literal in c1:\n","    for literal2 in c2:\n","      if negate(literal) == literal2:\n","        return True\n","  return False"],"metadata":{"id":"HdvPx4pt9eO_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["c1 = Clause([\"p\", \"r\"])\n","c2 = Clause([\"~r\", \"~q\"])\n","is_resolvable(c1, c2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OA99cJaM-kB0","executionInfo":{"status":"ok","timestamp":1678119180261,"user_tz":-330,"elapsed":431,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"28882b2b-0fe9-4c89-a830-9c29f5ca604d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["for literal in c2:\n","  print(literal)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vrcgqBrUJ-r8","executionInfo":{"status":"ok","timestamp":1678119188775,"user_tz":-330,"elapsed":582,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"48bf6558-d5c6-43ba-ecf4-569dcef9da25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["~q\n","~r\n"]}]},{"cell_type":"code","source":["# checking union operation effects\n","s = set()\n","s.add('p')\n","s.add('q')\n","s2 = set()\n","s2.add('p')\n","s.union(s2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3IGiKBDpVSh9","executionInfo":{"status":"ok","timestamp":1678119196907,"user_tz":-330,"elapsed":1022,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"a0dbf7d2-012e-47ed-d944-06ec9939d11f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'p', 'q'}"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["def resolve(c1, c2):\n","  '''\n","  resolves two Clause objects and returns a new Clause object \n","  '''\n","  \n","  c = Clause([])\n","  c1_set_of_literals = c1.literals\n","  c2_set_of_literals = c2.literals\n","  union_set = c1_set_of_literals.union(c2_set_of_literals)\n","  count = 0\n","  # print(union_set)\n","  for literal in c1_set_of_literals:\n","    # print(literal)\n","    for literal2 in c2_set_of_literals:\n","      # print(literal, literal2)\n","      if negate(literal) == literal2:\n","        count += 1\n","        # print(\"entered if\")\n","        union_set.remove(literal)\n","        union_set.remove(literal2)\n","        # print(\"union set\", union_set)\n","    if count ==1:\n","      break\n","  for i in union_set:\n","    c.add_literal(i)\n","  return c\n","\n","        "],"metadata":{"id":"mjzaBS9j-9l9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["c1 = Clause([\"p\", \"q\", \"r\"])\n","c2 = Clause([\"~p\", \"~r\"])\n","c = resolve(c1, c2)\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EZ2ViJJ3NBDV","executionInfo":{"status":"ok","timestamp":1678119220327,"user_tz":-330,"elapsed":697,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"1e04efbf-11bc-4b34-9b75-558690639fbe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(~p | p | q)\n"]}]},{"cell_type":"code","source":["c1.literals"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MIGpQ4GPUGnx","executionInfo":{"status":"ok","timestamp":1678119223616,"user_tz":-330,"elapsed":708,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"c498c8a2-f5ad-4a07-8737-292345eedb19"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'p', 'q', 'r'}"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["# Resolution Algorithm"],"metadata":{"id":"oUyWUP906cuE"}},{"cell_type":"code","source":["def resolution(cnf):\n","  '''\n","  checks whether cnf is satifiable or not\n","  return True if satisfiable else False\n","  '''\n","  clauses = get_clauses_from_cnf(cnf)\n","  # print(clauses)\n","  while True:\n","\n","    new_set_of_clauses = set()\n","    for i in range(len(clauses)):\n","      for j in range(i+1, len(clauses)):\n","        c1 = clauses[i]\n","        c2 = clauses[j]\n","        if is_resolvable(c1, c2):\n","          resolvent = resolve(c1, c2)   # resolve returns a clause\n","          print(\"resolvent clauses\", resolvent)\n","          # print(\"resolvent clauses\", resolvent.literals)\n","          if len(resolvent.literals) == 0:\n","            return False\n","          new_set_of_clauses.add(resolvent)\n","\n","    print(\"new set of clauses\", new_set_of_clauses)\n","    print(\"clauses\", clauses)\n","    print(\"is subset\", new_set_of_clauses.issubset(clauses))\n","\n","    if new_set_of_clauses.issubset(clauses):\n","      # print(clauses)\n","      return True #Satsifiable\n","\n","    clauses = set(clauses)\n","    # print(clauses)\n","    clauses = clauses.union(new_set_of_clauses)  \n","    # print(clauses)\n","    clauses = list(clauses)\n","   \n"],"metadata":{"id":"NKpMGfL31p7f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cnf2 = Proposition(\"&\", Proposition(\"|\", Proposition(\"a\"), Proposition(\"b\")),\n","                  Proposition(\"|\", Proposition(\"~a\"), Proposition(\"b\")), \n","                  Proposition(\"|\", Proposition(\"a\"), Proposition(\"~b\")), \n","                   Proposition(\"|\", Proposition(\"~a\"), Proposition(\"~b\"))\n",")\n","cnf2.print_proposition()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qtlc0m8zcS3D","executionInfo":{"status":"ok","timestamp":1678119247997,"user_tz":-330,"elapsed":431,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"a4a85c3b-5d84-4892-f9ba-1c9724c7d0ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["((a | b) & (~a | b))\n"]}]},{"cell_type":"code","source":["resolution(cnf2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p7cosiqbeYbZ","executionInfo":{"status":"ok","timestamp":1678119254473,"user_tz":-330,"elapsed":460,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"b2dcc64e-76ac-4085-fd52-1b1b127cfc67"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["resolvent clauses (b)\n","resolvent clauses (a)\n","resolvent clauses (~a | a)\n","resolvent clauses (b | ~b)\n","resolvent clauses (~a)\n","resolvent clauses (~b)\n","new set of clauses {(~a | a), (~a), (b), (a), (b | ~b), (~b)}\n","clauses [(b | a), (~a | b), (~b | a), (~a | ~b)]\n","is subset False\n","resolvent clauses (b)\n","resolvent clauses ()\n"]},{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# checking union operation on Clause objects\n","c1 = Clause([\"p\", \"q\"])\n","c2 = Clause([\"~p\", \"~q\"])\n","c3 = Clause([\"p\"])\n","new = set()\n","new = new.union(c1)\n","new = new.union(c2)\n","new = new.union(c3)\n","print(new)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"72DnfafdwfmI","executionInfo":{"status":"ok","timestamp":1678119258837,"user_tz":-330,"elapsed":4,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"992c4345-a987-4262-af6a-65e955cd0e34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'~p', 'p', 'q', '~q'}\n"]}]},{"cell_type":"code","source":["cnf = Proposition(\"&\", Proposition(\"|\", Proposition(\"p\"), Proposition(\"q\")),\n","                  Proposition(\"|\", Proposition(\"~p\"), Proposition(\"q\")), \n","                  Proposition(\"|\", Proposition(\"p\"), Proposition(\"r\")) \n","                  )\n","cnf.print_proposition()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Drrzac8LAZry","executionInfo":{"status":"ok","timestamp":1678119261802,"user_tz":-330,"elapsed":600,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"1f7e6e87-2d0d-4455-afab-458245e40215"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["((p | q) & (~p | q))\n"]}]},{"cell_type":"code","source":["resolution(cnf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IX3f4vOFAZ9P","executionInfo":{"status":"ok","timestamp":1678119263454,"user_tz":-330,"elapsed":4,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"8c23bfd8-0908-4c0c-e4ae-7b0237700ada"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["resolvent clauses (q)\n","resolvent clauses (q | r)\n","new set of clauses {(q), (q | r)}\n","clauses [(p | q), (~p | q), (p | r)]\n","is subset False\n","resolvent clauses (q)\n","resolvent clauses (r | q)\n","new set of clauses {(q), (r | q)}\n","clauses [(q), (p | q), (q | r), (p | r), (~p | q)]\n","is subset True\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":[],"metadata":{"id":"eF0pVDypcOY9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Problem 1: "],"metadata":{"id":"E-GHiVbSZp9O"}},{"cell_type":"code","source":["# Suppose we want to design a circuit that takes two boolean inputs A and B, \n","# and produces a boolean output C that is true if and only if both A and B are true.\n","#  We can represent this circuit using the following propositional formulas:\n","\n","# If A is true, then C is true: A => C\n","# If B is true, then C is true: B => C\n","# If both A and B are true, then C is true: A ∧ B => C\n"],"metadata":{"id":"ZBksjAAE6daG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cnf1 = Proposition(\"&\", Proposition(\"|\", Proposition(\"~a\"), Proposition(\"c\")),\n","                  Proposition(\"|\", Proposition(\"~b\"), Proposition(\"c\"))\n","                  )\n","cnf1a = Proposition(\"|\", Proposition(\"|\",Proposition(\"~a\"), Proposition(\"~b\")), Proposition(\"c\")) \n","cnf1b = Proposition(\"&\", cnf1, cnf1a)\n","cnf1b.print_proposition()"],"metadata":{"id":"MZl2dbmjZpip","executionInfo":{"status":"ok","timestamp":1678119277687,"user_tz":-330,"elapsed":407,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"95cb1151-e780-4aef-d27f-6e5c93905193","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(((~a | c) & (~b | c)) & ((~a | ~b) | c))\n"]}]},{"cell_type":"code","source":["resolution(cnf1b)"],"metadata":{"id":"nika2naPZpfe","executionInfo":{"status":"ok","timestamp":1678119290579,"user_tz":-330,"elapsed":705,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"dd5d7859-4ccb-411d-9670-dfa9cc099612","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["new set of clauses set()\n","clauses [((~a | c) | (~b | c)), (c | (~a | ~b))]\n","is subset True\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":[],"metadata":{"id":"TOHTUa8iZpcG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Problem 2"],"metadata":{"id":"sVcIOTYUdh1_"}},{"cell_type":"code","source":["# Suppose we want to plan a picnic and we have the following requirements:\n","\n","# If it's sunny, then we want to go to the park: sunny => park\n","# If it's rainy, then we want to go to the museum: rainy => museum\n","# If we go to the park, we want to have a picnic: park => picnic\n","# If we go to the museum, we want to learn something: museum => learn\n","# We want to plan a picnic where we have a picnic and learn something. "],"metadata":{"id":"9lnCNp3f6XuO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p2a = Proposition(\"~\", Proposition(\"&\", Proposition(\"Picnic\"), Proposition(\"Learn\")))\n","p2b1 = Proposition(\"|\", Proposition(\"~Sunny\"), Proposition(\"~Museum\"))\n","p2b2 = Proposition(\"|\", Proposition(\"Picnic\"), Proposition(\"Learn\")) \n","p2b = Proposition(\"|\", p2b1, p2b2)\n","p2c1 = Proposition(\"|\", Proposition(\"~Rainy\"), Proposition(\"~Park\"))\n","p2c = Proposition(\"|\",p2c1,p2b2)\n","cnf3 = Proposition(\"|\",p2b1,p2c)\n","# cnf3.print_proposition()"],"metadata":{"id":"2cgz3pEsdiLH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["resolution(cnf3)"],"metadata":{"id":"7RNA4W3-dip6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678119316109,"user_tz":-330,"elapsed":401,"user":{"displayName":"Sai Abhishek","userId":"01071649639389865844"}},"outputId":"17af6648-e050-4360-d32c-5df60b8f7439"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["new set of clauses set()\n","clauses [(~Sunny | ~Museum), ((Picnic | Learn) | (~Rainy | ~Park))]\n","is subset True\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":[],"metadata":{"id":"GkX3-kmBdil4"},"execution_count":null,"outputs":[]}]}